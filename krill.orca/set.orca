using krill;
using krill.handler;

def _set_type_check(data)
{
	if data.TYPE != {,}.TYPE {
		return handler.error('type error');
	}
	elif data.KRILL_TYPE != 'set' {
		return handler.error('type error');
	}

	return true;
}


def sadd(key, ...subkeys)
{
	data = krill.data[key];
	if data == nil {
		krill.data[key] = {,};
		data = krill.data[key];
		data.MEMBERS['KRILL_TYPE'] = 'set';
	}
	ret = .._set_type_check(data);
	if ret != true {
		return ret;
	}

	count = 0;
	for subkey in subkeys {
		data[subkey] = true;
		count += 1;
	}

	return count;
}


def srem(key, ...subkeys)
{
	data = krill.data[key];

	if data == nil {
		return handler.error('not exist');
	}
	ret = .._set_type_check(data);
	if ret != true {
		return ret;
	}

	count = 0;
	for subkey in subkeys {
		data.erase_key(subkey);
		count += 1;
	}

	return count;
}

def smembers(key)
{
	data = krill.data[key];

	if data == nil {
		return handler.error('not exist');
	}
	ret = .._set_type_check(data);
	if ret != true {
		return ret;
	}

	return data.keys();
}


def scard(key)
{
	data = krill.data[key];

	if data == nil {
		return 0;
	}
	ret = .._set_type_check(data);
	if ret != true {
		return ret;
	}

	return data.size();
}

def _sunion(keys)
{
	out = {,};

	for key in keys {
		data = krill.data[key];
		if data == nil {
			continue;
		}

		ret = .._set_type_check(data);
		if ret != true {
			return ret;
		}

		for k, v in data {
			out[k] = v;
		}

		idx += 1;
	}

	return out;
}

def sunion(...keys)
{
	out = .._sunion(keys);
	return out.keys();	
}

def sunionstore(dest, ...keys)
{
	out = .._sunion(keys);
	krill.data[dest] = out;
	krill.data[dest].MEMBERS['KRILL_TYPE'] = 'set';
	return out.size();	
}

def _sinter(keys)
{
	out = {,};
	map_list = [];

	for key in keys {
		data = krill.data[key];
		if data == nil {
			continue;
		}

		ret = .._set_type_check(data);
		if ret != true {
			return ret;
		}

		map_list.push_back(data);
	}

	base = map_list[0];
	others = map_list[1:];
	for k, v in base {
		flag_all = true;
		for m in others {
			if !m.has_key(k) {
				flag_all = false;
				break;
			}
		}

		if flag_all {
			out[k] = v;
		}
	}

	return out;
}


def sinter(...keys)
{
	out = .._sinter(keys);
	return out.keys();	
}

def sinterstore(dest, ...keys)
{
	out = .._sinter(keys);
	krill.data[dest] = out;
	krill.data[dest].MEMBERS['KRILL_TYPE'] = 'set';
	return out.size();	
}


def _sdiff(keys)
{
	out = {,};
	map_list = [];

	for key in keys {
		data = krill.data[key];
		if data == nil {
			continue;
		}

		ret = .._set_type_check(data);
		if ret != true {
			return ret;
		}

		map_list.push_back(data);
	}

	base = map_list[0];
	others = map_list[1:];
	for k, v in base {
		flag_exist = false;
		for m in others {
			if m.has_key(k) {
				flag_exist = true;
				break;
			}
		}

		if !flag_exist {
			out[k] = v;
		}
	}

	return out;
}

def sdiff(...keys)
{
	out = .._sdiff(keys);
	return out.keys();	
}

def sdiffstore(dest, ...keys)
{
	out = .._sdiff(keys);
	krill.data[dest] = out;
	krill.data[dest].MEMBERS['KRILL_TYPE'] = 'set';
	return out.size();	
}

def sismember(key, subkey)
{
	data = krill.data[key];

	if data == nil {
		return 0;
	}
	ret = .._set_type_check(data);
	if ret != true {
		return ret;
	}

	if data.has_key(subkey) {
		return 1;
	}

	return 0;
}

def smove(skey, dkey, subkey)
{
	src = krill.data[skey];
	dst = krill.data[dkey];

	if src == nil {
		return 0;
	}
	ret = .._set_type_check(src);
	if ret != true {
		return ret;
	}

	if dst == nil {
		krill.data[dkey] = {,};
		dst = krill.data[dkey];
	}
	ret = .._set_type_check(dst);
	if ret != true {
		return ret;
	}

	if src.has_key(subkey) {
		dst[subkey] = src[subkey];
		src.erase_key(subkey);
		return 1;
	}

	return 0;
}

