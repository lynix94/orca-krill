using krill;
using krill.handler;
using krill.stream;
using krill.stream.map_db;

using strings;
using time;
using datetime;

using compress.tsdiff;


def ts_precision := 0;
def value_precision := 3;
def comp_block_len := 1000;

def compressed := {,};

def init_db()
{

}

def xadd(key, id, row, maxlen, about)
{
	data = krill.data[key];
	if data == nil {
		krill.data[key] = {,};
		data = krill.data[key];
		data.MEMBERS['KRILL_TYPE'] = 'stream';
		data.MEMBERS['GROUPS'] = {,};
	}

	ret = stream._stream_type_check(data);
	if ret != true {
		return ret;
	}

	if id == '*' {
		ts = stream._get_new_ts(data);
	}
	else {
		ts = stream._id_to_ts(id);
	}

	data[ts] = row;
	return stream._ts_to_id(ts);
}

def xlen(key)
{
	data = krill.data[key];
	if data == nil {
		return 0;
	}

	ret = stream._stream_type_check(data);
	if ret != true {
		return ret;
	}

	return data.size();
}

def xrange(key, start, end, count, fields)
{
	data = krill.data[key];
	ret = stream._stream_type_check(data);
	if ret != true {
		return ret;
	}

	start_ts = stream._id_to_ts(start);
	end_ts = stream._id_to_ts(end);

	result = [];
	if key.starts_with('ts:') && start_ts < data.first().key() { # only in ts
		comp_result = map_db.scan_comp_block(key, start_ts, end_ts);
		for item in comp_result {
			result.push_back(stream._entry_to_list(item));	
		}
	}

	s_it = data.lower_bound(start_ts);
	e_it = data.upper_bound(end_ts);

	while s_it != e_it {
		result.push_back(stream._entry_to_list(s_it()));	
		if count > 0 && result.size() >= count {
			break;
		}

		if s_it == data.last() {
			break;
		}

		s_it.next();
	}

	return result;
}

def xrevrange(key, end, start, count, fields)
{
	data = krill.data[key];
	ret = stream._stream_type_check(data);
	if ret != true {
		return ret;
	}

	end_ts = stream._id_to_ts(end);
	start_ts = stream._id_to_ts(start);

	e_it = data.upper_bound(end_ts);
	s_it = data.lower_bound(start_ts);
	result = [];

	while e_it != s_it {
		if e_it == data.first() {
			break;
		}
		e_it.prev();

		result.push_back(stream._entry_to_list(e_it()));
		if count > 0 && result.size() >= count {
			break;
		}
	}

	return result;
}

def xdel(key, ...id_list)
{
	data = krill.data[key];
	ret = stream._stream_type_check(data);
	if ret != true {
		return ret;
	}

	count = 0;
	for id in id_list {
		ts = stream._id_to_ts(id);
		if data.has_key(ts) {
			count += 1;
			data.erase_key(ts);
		}
	}

	return count;
}

def xread(key_id_map, count, block)
{
	key_ts_map = {,};
	for key, id in key_id_map {
		if id == '$' {
			data = krill.data[key];
			ts = stream._get_new_ts(data);
		}
		else {
			ts = stream._id_to_ts(id);
		}

		key_ts_map[key] = ts;
	}

	result = [];
	for key, ts in key_ts_map {
		data = krill.data[key];
		ret = stream._stream_type_check(data);
		if ret != true {
			continue;
		}

		key_result = [];
		s_it = data.lower_bound(ts);
		while s_it != data.end() {
			key_result.push_back(stream._entry_to_list(s_it()));
			if s_it == data.last() {
				break;
			}
			s_it.next();
		}

		if key_result.size() > 0 {
			result.push_back([key, key_result]);
		}

		if count != nil && result.size() > count {
			break;
		}
	}

	if result.size() == 0 && block != nil {
		ret = {'blocking_keys':key_ts_map.keys(), 'timeout':block, 'command':..xread2, 'param':(key_ts_map, count)};
		ret.MEMBERS['RESP_TYPE'] = 'block';
		return ret;
	}

	return result;
}

def xread2(key_ts_map, count)
{
	result = [];
	for key, ts in key_ts_map {
		data = krill.data[key];
		ret = stream._stream_type_check(data);
		if ret != true {
			continue;
		}

		key_result = [];
		s_it = data.lower_bound(ts);
		while s_it != data.end() {
			key_result.push_back(stream._entry_to_list(s_it()));
			if s_it == data.last() {
				break;
			}
			s_it.next();
		}

		if key_result.size() > 0 {
			result.push_back([key, key_result]);
		}

		if count != nil && result.size() > count {
			break;
		}
	}

	if result.size() == 0 {
		return nil;
	}

	return result;
}

def xtrim(key, count, about)
{
	data = krill.data[key];
	ret = stream._stream_type_check(data);
	if ret != true {
		return ret;
	}

	cur_size = data.size();
	del_count = cur_size - count;
	if del_count <= 0 {
		return 0;
	}

	// TODO: about
	count = 0;
	for i in range(del_count) {
		data.first().erase();
		count += 1;
		if data.size() == 0 {
			break;
		}
	}
	
	return count;
}


def min(key)
{
	comp_list = map_db.compressed[key];
	if comp_list != nil && comp_list.size() > 0{
		return comp_list[0].start_ts;
	}

	data = krill.data[key];
	if data == nil {
		return 0.0;
	}

	ret = stream._stream_type_check(data);
	if ret != true {
		return nil;
	}

	if data.size() == 0 {
		return 0.0;
	}

	return data.first().key();
}

def dump()
{
	print: krill.data;
}



##
## extensions..
####


def comp_block
{
	def ts;
	def start_ts;
	def end_ts;
	def count;
}

def compress(key, count)
{
	#print: '## compress';
	if !key.starts_with('ts:') {
		return;
	}

	data = krill.data[key];
	ret = stream._stream_type_check(data);
	if ret != true {
		return false;
	}

	if count < 3 {
		return '';
	}

	#print: '## size: %d' % data.size();

	cb = map_db.comp_block.clone();
	cb.ts = tsdiff.clone(map_db.ts_precision, map_db.value_precision);
	cb.start_ts = data.first().key();
	cb.count = 0;

	for i in range(count-1) {
		k = data.first().key();
		v = data.first().value();
		data.first().erase();
		cb.ts.push_back(k.integer(), '%.6f' % v);
		cb.count += 1;
	}
	cb.end_ts = data.first().key();
	
	comp_list = map_db.compressed[key];
	if comp_list == nil {
		comp_list = [];
		map_db.compressed[key] = comp_list;
	}

	comp_list.push_back(cb);
	while comp_list.size() > map_db.comp_block_len {
		comp_list.pop_front();
	}

	return count;
}


def copy(key, count, dst_db)
{
	data = krill.data[key];
	ret = stream._stream_type_check(data);
	if ret != true {
		return false;
	}

	if data.size() < count {
		count = data.size();
	}
 
	for i in range(count) {
		k = data.first().key();
		v = data.first().value();

		data.first().erase();
		dst_db.xadd(key, k, v);
	}

	return count;
}

def tsadd(...param)
{
	idx = 0;
	while idx + 2 < param.size() {
		key = param[idx];
		ts = param[idx+1].float();
		value = param[idx+2].float();

		if !key.starts_with('ts:') {
			return handler.error('tsadd need ts: prefix');
		}

		ret = ..xadd(key, ts, value);
		if ret.TYPE != type.str {
			return ret;
		}

		idx += 3;
	}

	return 'OK';
}


def scan_comp_block(key, start_ts, end_ts)
{
	comp_list = map_db.compressed[key];
	if comp_list == nil {
		return nil;
	}

	result = [];
	for cb in comp_list {
		if cb.end_ts < start_ts {
			continue;
		} 

		if cb.start_ts > end_ts {
			break;
		}

		result += cb.ts.uncompress(end_ts); # [(ts,v),(ts,v)....]
	}

	return result;
}

def tsrange(start_ts, end_ts, ...key_list)
{
	if start_ts == nil || start_ts == '-' {
		start_ts = 0;
	}
	elif start_ts.TYPE == type.string && (start_ts.find('-') > 0 || start_ts.find('T') > 0) {
		start_ts = datetime.clone(start_ts).timestamp();
	}
	else {
		start_ts = start_ts.float();
	}

	if end_ts == nil || end_ts == '+' {
		end_ts = type.limits.int32_max;
	}
	elif end_ts.TYPE == type.string && (end_ts.find(':') > 0 || end_ts.find('T') > 0) {
		end_ts = datetime.clone(end_ts).timestamp();
	}
	else {
		end_ts = end_ts.float();
	}

	result = {,};

	for idx, key in key_list {
		if !key.starts_with('ts:') {
			return handler.error('tsrange need ts: prefix');
		}

		data = krill.data[key];
		ret = stream._stream_type_check(data);
		if ret != true {
			return ret;
		}

		if start_ts < data.first().key() {
			comp_result = map_db.scan_comp_block(key, start_ts, end_ts);
			if comp_result != nil {
				for c in comp_result {
					item = result[c[0]];
					if item == nil {
						item = type.tuple();
						for i in range(key_list.size()) {
							item.push_back(nil);
						}
						result[c[0]] = item;
					}
			
					item[idx] = c[1];
				}
			}
		}

		s_it = data.lower_bound(start_ts);
		e_it = data.upper_bound(end_ts);

		while s_it != e_it {
			item = result[s_it.key()];
			if item == nil {
				item = type.tuple();
				for i in range(key_list.size()) {
					item.push_back(nil);
				}
				result[s_it.key()] = item;
			}

			item[idx] = s_it.value();
			if s_it == data.last() {
				break;
			}

			s_it.next();
		}
	}

	ret = '';
	for k, v in result {
		ret += '%f,%s\n' % (k, strings.join(',', v...));
	}

	return ret;
}

def tsstat_key(key)
{
	if !key.starts_with('ts:') {
		return nil;
	}

	data = krill.data[key];
	ret = stream._stream_type_check(data);
	if ret != true {
		return ret;
	}

	comp_list = map_db.compressed[key];
	if comp_list == nil {
		comp_list = [];
	}

	comp_size = 0;
	comp_count = 0;
	comp_block_n = 0;
	for cb in comp_list {
		comp_count += cb.ts.count();
		comp_size += cb.ts.size();
		comp_block_n += 1;
	}

	comp_ratio = 100;
	if comp_count > 0 {
		comp_ratio = comp_size.float() / (comp_count * 64 * 2) * 100.0;
	}

	return [data.size(), comp_count, comp_size, comp_block_n, comp_ratio];
}

def tsstat_all()
{
	item_count = 0;
	comp_size = 0;
	comp_count = 0;
	comp_block_n = 0;

	s_it = krill.data.lower_bound('ts:');
	while true {
		if s_it == krill.data.end() {
			break;
		}

		if !s_it.key().starts_with('ts:') {
			break;
		}

		result = ..tsstat_key(s_it.key());
		item_count += result[0];
		comp_count += result[1];
		comp_size += result[2];
		comp_block_n += result[3];

		if s_it == krill.data.last() {
			break;
		}

		s_it.next();
	}
	
	comp_ratio = 100;
	if comp_count > 0 {
		comp_ratio = comp_size.float() / (comp_count * 64 * 2) * 100.0;
	}
	

	return [item_count, comp_count, comp_size, comp_block_n, comp_ratio];
}


def tsstat(key)
{
	if key == nil {
		stat = ..tsstat_all();
	}
	else {
		if !key.starts_with('ts:') {
			return handler.error('tsstat need ts: prefix');
		}

		stat = ..tsstat_key(key);
	}

	result = '''items in memory map: %d
items in compressed list: %d
compressed size(bit): %d
compressed size(Byte): %d
compressed block: %d
compressed ratio: %f
''' % (stat[0], stat[1], stat[2], stat[2]/8, stat[3], stat[4]);

	return result;
}



def tslist_key(key)
{
	re_key = type.regex(key);

	result = [];
	it = krill.data.lower_bound('ts:');
	while true {
		if it == krill.data.end() {
			break;
		}
		if !it.key().starts_with('ts:') {
			break;
		}

		if re_key == it.key() {
			result.push_back(it.key());
		}

		if it == krill.data.last() {
			break;
		}
		it.next();
	}

	return result;
}

def tslist_all()
{
	result = [];
	s_it = krill.data.lower_bound('ts:');
	while true {
		if s_it == krill.data.end() {
			break;
		}
		if !s_it.key().starts_with('ts:') {
			break;
		}

		result.push_back(s_it.key());

		if s_it == krill.data.last() {
			break;
		}
		s_it.next();
	}

	return result;
}


def tslist(key)
{
	if key == nil {
		list = ..tslist_all();
	}
	else {
		list = ..tslist_key(key);
	}

	return list;
}


def tssave(name)
{
	if name == nil {
		name = 'tsdump.dat';
	}

	fh = io.open(name, 'w');

	tslist = ..tslist();
	fh.write(strings.join(',', tslist...));
	fh.write('\n');

	result = ..tsrange(nil, nil, tslist...);
	fh.write(result);

	fh.close();
	return true;
}


def tsload(name)
{
	if name == nil {
		name = 'tsdump.dat';
	}

	fh = io.open(name, 'r');

	keys = fh.read_line().strip().split(',');

	while true {
		try {
			line = fh.read_line().strip();
			if line == '' {
				continue;
			}

			toks = line.split(',');
			for i, key in keys {
				if toks[i+1] == 'nil' {
					continue;
				}

				..tsadd(key, toks[0], toks[i+1]);
			}

		}
		catch orca.file.eof {
			break;
		}
	}

	fh.close();
	return true;
}



def tsconfig(key, value)
{
	switch key
	{
	case 'ts_precision':
		if value == nil {
			map_db.ts_precision = value.integer(map_db.ts_precesion);
		}

		return map_db.ts_precision;

	case 'value_precision':
		if value != nil {
			map_db.value_precision = value.integer(map_db.value_precision);
		}

		return map_db.value_precision;

	case 'comp_block_len':
		if value == nil {
			map_db.comp_block_len = value.integer(map_db.comp_block_len);
		}

		return map_db.comp_block_len;

	default:
		return handler.error('invalid key');
	}

	return true;
}


