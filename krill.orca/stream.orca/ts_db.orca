using krill;
using krill.stream;
using krill.handler;

using datetime;

def first_db;
def second_db;

# TODO: as config
def block_size := 200;

def init_db()
{
	stream.map_db.init_db();
	..first_db = stream.map_db;

	stream.level_db.init_db();
	..second_db = stream.level_db;
}

def dump()
{
	..first_db.dump();
	..second_db.dump();
}

# ts_db ignore maxlen (handle it by config)
def xadd(key, id, row, maxlen, about)
{
	if row.TYPE == type.map {
		if row.size() != 1 {
			return handler.error('ts db can not have multi attribute');
		}

		row = row.first().value();
	}

	ret = ..first_db.xadd(key, id, row, maxlen, about);
	if ..first_db.xlen(key) > ..block_size * 2 {
		comp = ..first_db.compress(key, ..block_size);
	}

	return ret;
}


def xlen(key)
{
	return ..first_db.xlen(key) + ..second_db.xlen(key);
}

def xrange(key, start, end_ts, count, fields)
{
	start_ts = stream._id_to_ts(start);
	if start_ts >= ..first_db.min(key) { # only 1st
		return ..first_db.xrange(key, start, end_ts, count, fields);
	}
	else {
		return  ..second_db.xrange(key, start, end_ts, count, fields);
	}
}

def xrevrange(key, end_ts, start, count, fields)
{
	start_ts = stream._id_to_ts(start);
	if start_ts >= ..first_db.min(key) { # only 1st
		return ..first_db.xrevrange(key, end_ts, start, count, fields);
	}

	result_2 = ..second_db.xrevrange(key, end_ts, start, count, fields);
	result_1 = ..first_db.xrevange(key, end_ts, start, count, fields);

	return result_1 + result_2;
}

def xdel(key, ...id_list)
{
	return ..first_db.xdel(key, id_list...) + ..second_db.xdel(key, id_list...);
}

def xread(key, id, count, block)
{
	return ..first_db.xread(key, id, count, block);
}

# ts_db ignore maxlen (handle it by config)
def xtrim(key, count, about)
{
	return 0;
}


def tsadd(...param)
{
	idx = 0;
	while idx + 2 < param.size() {
		key = param[idx];
		ts = param[idx+1].float();
		value = param[idx+2].float();

		ret = ..xadd(key, ts, value);
		if ret.TYPE != type.str {
			return ret;
		}

		idx += 3;
	}

	return 'OK';
}


def tsrange(start_ts, end_ts, ...key_list)
{
	if start_ts == nil || start_ts == '-' {
		start_ts = 0;
	}
	elif start_ts.TYPE == type.string && (start_ts.find('-') > 0 || start_ts.find('T') > 0) {
		start_ts = datetime.clone(start_ts).timestamp();
	}
	else {
		start_ts = start_ts.float();
	}

	if end_ts == nil || end_ts == '+' {
		end_ts = type.limits.int32_max;
	}
	elif end_ts.TYPE == type.string && (end_ts.find(':') > 0 || end_ts.find('T') > 0) {
		end_ts = datetime.clone(end_ts).timestamp();
	}
	else {
		end_ts = end_ts.float();
	}


	flag_old = false;
	for key in key_list {
		if start_ts < ..first_db.min(key) {
			flag_old = true;
			break;
		}
	}

	# TODO: enable later
	flag_old = false;

	if flag_old {
		return ..second_db.tsrange(start_ts, end_ts, key_list...);
	}
	else {
		return ..first_db.tsrange(start_ts, end_ts, key_list...);
	}
}


def tsstat(key)
{
	return ..first_db.tsstat(key);
}

def tslist(p)
{
	return ..first_db.tslist(p);
}

def tssave(name)
{
	return ..first_db.tssave(name);
}

def tsload(name)
{
	return ..first_db.tsload(name);
}

def tsconfig(key, value)
{
	return ..first_db.tsconfig(key, value);
}











